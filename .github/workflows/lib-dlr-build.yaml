name: dlr-build reusable

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
      base_image:
        required: true
        type: string
      sdk_ver:
        required: true
        type: string
    secrets:
      env_PAT:
        required: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.env_PAT }}

      - name: Set environment variables
        id: set_env
        run: |
          # docker tag
          base_image=${{ inputs.base_image }}
          docker_tag=osrt-builder:${{ inputs.sdk_ver }}-${{ inputs.arch }}-${base_image//:/}
          remote_docker_tag=ghcr.io/${{ github.repository_owner }}/$docker_tag
          remote_docker_tag=${remote_docker_tag,,}
          # package names: moved down
          # whl_name=dlr-1.13.0-py3-none-any.whl
          # whl_path=workarea/neo-ai-dlr/python/dist/${whl_name}
          # artifacts dir
          artifacts_name=dlr-${base_image//:/}
          artifacts_dir=release-${artifacts_name}
          # register the env variables
          echo "docker_tag=${docker_tag}" >> $GITHUB_ENV
          echo "remote_docker_tag=${remote_docker_tag}" >> $GITHUB_ENV
          echo "artifacts_name=${artifacts_name}" >> $GITHUB_ENV
          echo "artifacts_dir=${artifacts_dir}" >> $GITHUB_ENV

      - name: Pull and tag Docker image
        run: |
          set -e
          docker pull $remote_docker_tag || { echo "Failed to pull Docker image."; exit 1; }
          docker tag $remote_docker_tag $docker_tag
          docker images

      - name: Update docker_run.sh
        run: |
          set -e
          # Remove '-it' in docker-run command in docker_run.sh
          sed -i.bak 's/docker run -it --rm/docker run --rm --platform linux\/arm64/' docker_run.sh

      - name: Prepare DLR source
        run: |
          set -e
          BASE_IMAGE=${{ inputs.base_image }} ./docker_run.sh ./dlr_prepare.sh

      - name: Build DLR library
        run: |
          set -e
          BASE_IMAGE=${{ inputs.base_image }} ./docker_run.sh ./dlr_build.sh

      - name: Package DLR library
        run: |
          set -e
          BASE_IMAGE=${{ inputs.base_image }} ./docker_run.sh ./dlr_package.sh

      - name: Check for output files
        run: |
          set -e
          whl_path=$(find workarea/neo-ai-dlr/python/dist -name "dlr-*.whl" || { echo "dlr wheel package not found."; exit 1; })
          whl_name=$(basename $whl_path)
          echo "whl_name=${whl_name}" >> $GITHUB_ENV
          echo "whl_path=${whl_path}" >> $GITHUB_ENV

      - name: Print environment variables
        run: |
          echo "artifacts_dir: ${{ env.artifacts_dir }}"
          echo "whl_path: ${{ env.whl_path }}"
          echo "whl_name: ${{ env.whl_name }}"

      - name: Copy output files to the release folder
        run: |
          set -e
          mkdir -p ${{ env.artifacts_dir }}
          cp ${{ env.whl_path }} ${{ env.artifacts_dir }}
          find ${{ env.artifacts_dir }} -name "${{ env.whl_name }}" || { echo "${{ env.whl_name }} not found."; exit 1; }

      - name: Upload the artifacts folder
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifacts_name }}
          path: ${{ env.artifacts_dir }}
